name: Build KernelSU Next for Samsung SM-X810

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "Processor architecture branch"
        required: true
        default: 'sm8550'  # Snapdragon 8 Gen 2 for SM-X810
      FEIL:
        description: "Configuration file"
        required: true
        default: 'gki_defconfig'  # Placeholder; replace with actual defconfig
      CPUD:
        description: "Processor codename"
        required: true
        default: 'kalama'  # Codename for Snapdragon 8 Gen 2
      ANDROID_VERSION:
        description: "Android version for kernel"
        required: true
        default: 'android14'  # Likely Android 14 for Tab S9
      KERNEL_VERSION:
        description: "Kernel version"
        required: true
        default: '5.15'  # Common for recent Samsung devices
      BUILD_METHOD:
        description: "Build method"
        required: true
        default: 'samsung'
      KSUNEXT_ENABLED:
        description: "Enable KernelSU Next"
        required: true
        type: boolean
        default: true
      SUSFS_ENABLED:
        description: "Enable SUSFS"
        required: true
        type: boolean
        default: true
      SUSFS_VERSION:
        description: "SUSFS version"
        required: true
        default: 'v1.5.5'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Maximize build space
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      # Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "build"
          git config --global user.email "${{ secrets.EMAIL || '70756062@qq.com' }}"

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt update -y && sudo apt upgrade -y
          sudo apt install -y python3 git curl bc bison build-essential flex libssl-dev

      # Initialize and sync Samsung kernel repository
      - name: Initialize and sync repository
        run: |
          mkdir -p kernel_workspace && cd kernel_workspace
          # Replace with the actual direct download URL for SM-X810 kernel source
          curl -L --retry 3 --retry-delay 5 "https://download.samsung.com/opensource/SM-X810_Kernel.tar.gz" -o kernel_source.tar.gz
          # Check the file type
          file kernel_source.tar.gz
          # Extract based on file type
          if file kernel_source.tar.gz | grep -q "gzip compressed"; then
            tar -xzf kernel_source.tar.gz
          elif file kernel_source.tar.gz | grep -q "POSIX tar archive"; then
            tar -xf kernel_source.tar.gz
          else
            echo "Error: Downloaded file is not a tar or tar.gz archive"
            echo "Contents of the downloaded file:"
            cat kernel_source.tar.gz
            exit 1
          fi
          # Move into the kernel directory (adjust based on actual extracted folder name)
          mv SM-X810_* kernel || mv kernel_* kernel || echo "Adjust folder name as needed"
          cd kernel
          # Clean up version string if present
          sed -i 's/ -dirty//g' scripts/setlocalversion || echo "No setlocalversion script found"

      # Configure LTO to THIN
      - name: Configure LTO to THIN
        run: |
          cd kernel_workspace/kernel
          sed -i -e 's/CONFIG_LTO=n/CONFIG_LTO=y/' \
                 -e 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' \
                 -e 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' \
                 arch/arm64/configs/${{ github.event.inputs.FEIL }}

      # Set up KernelSU Next
      - name: Set up KernelSU Next
        if: github.event.inputs.KSUNEXT_ENABLED == 'true'
        run: |
          cd kernel_workspace/kernel
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
          cd KernelSU-Next
          KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=16/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      # Set up SUSFS
      - name: Set up SUSFS
        if: github.event.inputs.SUSFS_ENABLED == 'true'
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }} --depth=1
          git clone https://github.com/TheWildJames/kernel_patches.git --depth=1
          cd kernel
          cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          cd KernelSU-Next
          cp ../../kernel_patches/KernelSU-Next-Implement-SUSFS-${{ github.event.inputs.SUSFS_VERSION }}-Universal.patch ./
          patch -p1 < KernelSU-Next-Implement-SUSFS-${{ github.event.inputs.SUSFS_VERSION }}-Universal.patch || exit 1
          cd ..
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || exit 1
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch || exit 1
          git add -A && git commit -m "BUILD Kernel" || true

      # Build Samsung kernel
      - name: Build kernel
        run: |
          cd kernel_workspace/kernel
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- ${{ github.event.inputs.FEIL }}
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)

      # Create AnyKernel3 package
      - name: Package with AnyKernel3
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          cp kernel_workspace/kernel/arch/arm64/boot/Image ./AnyKernel3/

      # Upload AnyKernel3
      - name: Upload AnyKernel3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_KernelSU_Next_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
          path: ./AnyKernel3/*

      # Upload kernel Image
      - name: Upload kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: Image_KernelSU_Next_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
          path: kernel_workspace/kernel/arch/arm64/boot/Image
